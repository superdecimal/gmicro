// Code generated by MockGen. DO NOT EDIT.
// Source: superdecimal/gmicro/pkg/proto (interfaces: CalculatorAPI_SumServer)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
	rpc "superdecimal/gmicro/pkg/proto"
)

// MockCalculatorAPI_SumServer is a mock of CalculatorAPI_SumServer interface
type MockCalculatorAPI_SumServer struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorAPI_SumServerMockRecorder
}

// MockCalculatorAPI_SumServerMockRecorder is the mock recorder for MockCalculatorAPI_SumServer
type MockCalculatorAPI_SumServerMockRecorder struct {
	mock *MockCalculatorAPI_SumServer
}

// NewMockCalculatorAPI_SumServer creates a new mock instance
func NewMockCalculatorAPI_SumServer(ctrl *gomock.Controller) *MockCalculatorAPI_SumServer {
	mock := &MockCalculatorAPI_SumServer{ctrl: ctrl}
	mock.recorder = &MockCalculatorAPI_SumServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalculatorAPI_SumServer) EXPECT() *MockCalculatorAPI_SumServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockCalculatorAPI_SumServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockCalculatorAPI_SumServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).Context))
}

// Recv mocks base method
func (m *MockCalculatorAPI_SumServer) Recv() (*rpc.Integer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*rpc.Integer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockCalculatorAPI_SumServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockCalculatorAPI_SumServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockCalculatorAPI_SumServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockCalculatorAPI_SumServer) SendAndClose(arg0 *rpc.SumResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockCalculatorAPI_SumServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockCalculatorAPI_SumServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockCalculatorAPI_SumServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockCalculatorAPI_SumServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockCalculatorAPI_SumServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockCalculatorAPI_SumServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockCalculatorAPI_SumServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockCalculatorAPI_SumServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockCalculatorAPI_SumServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCalculatorAPI_SumServer)(nil).SetTrailer), arg0)
}
